openapi: 3.0.3
info:
  title: Deny Burger API
  version: 1.0.0
  description: Deny Burger
paths:
  /api/v1/categories/:
    get:
      operationId: categories_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - categories
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryList'
          description: ''
  /api/v1/categories/{id}/:
    get:
      operationId: categories_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - categories
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/v1/orders/:
    post:
      operationId: orders_create
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/v1/orders/{id}/:
    get:
      operationId: orders_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: orders_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this order.
        required: true
      tags:
      - orders
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/orders/get_orders_by_session_id/{session_id}/:
    get:
      operationId: orders_get_orders_by_session_id_retrieve
      parameters:
      - in: path
        name: session_id
        schema:
          type: string
          pattern: ^[0-9ф]+$
        required: true
      tags:
      - orders
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/v1/products/:
    get:
      operationId: products_list
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - products
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
  /api/v1/products/{id}/:
    get:
      operationId: products_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this product.
        required: true
      tags:
      - products
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/products/filter_by_category/{category_id}/:
    get:
      operationId: products_filter_by_category_retrieve
      parameters:
      - in: path
        name: category_id
        schema:
          type: string
          pattern: ^[0-9ф]+$
        required: true
      tags:
      - products
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        icon:
          type: string
          format: uri
          nullable: true
          title: Category icon
      required:
      - id
      - name
    DeliveryMethodEnum:
      enum:
      - PICKUP
      - DELIVERY
      type: string
      description: |-
        * `PICKUP` - PICKUP
        * `DELIVERY` - DELIVERY
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/OrderProduct'
        customer_name:
          type: string
          title: Name of customer
          maxLength: 250
        customer_phone:
          type: string
          maxLength: 150
        session_id:
          type: string
          title: User session ID
          maxLength: 250
        status:
          $ref: '#/components/schemas/StatusEnum'
        delivery_method:
          $ref: '#/components/schemas/DeliveryMethodEnum'
        total_amount:
          type: integer
          readOnly: true
        full_address:
          type: string
          nullable: true
          title: Street, house, flat
          maxLength: 450
        floor:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        intercom:
          type: string
          nullable: true
          maxLength: 250
      required:
      - customer_name
      - customer_phone
      - delivery_method
      - id
      - products
      - session_id
      - status
      - total_amount
    OrderProduct:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        total_price:
          type: integer
          readOnly: true
          title: Total price of product
        product:
          type: integer
        order:
          type: integer
          readOnly: true
      required:
      - id
      - order
      - product
      - quantity
      - total_price
    PaginatedCategoryList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    PaginatedProductList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          title: Product name
          maxLength: 150
        category:
          type: integer
        description:
          type: string
          nullable: true
          maxLength: 10000
        image:
          type: string
          format: uri
        price_decimal:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          title: Product price (Decimal)
        weight_grams:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Weight in grams
        weight_kilocalories:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          title: Weight in kilocalories
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/ProductIngredient'
      required:
      - category
      - id
      - image
      - ingredients
      - name
    ProductIngredient:
      type: object
      properties:
        ingredient:
          type: string
          maxLength: 250
      required:
      - ingredient
    StatusEnum:
      enum:
      - NEW
      - PROCESSING
      - COMPLETED
      - CANCELED
      type: string
      description: |-
        * `NEW` - NEW
        * `PROCESSING` - PROCESSING
        * `COMPLETED` - COMPLETED
        * `CANCELED` - CANCELED
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
